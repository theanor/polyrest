/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.monolith.polyrest.api;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.context.request.NativeWebRequest;

import be.monolith.polyrest.model.Error;
import be.monolith.polyrest.model.Vehicle;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-13T10:07:13.239433100+02:00[Europe/Paris]")
@Validated
@Api(value = "vehicles", description = "the vehicles API")
public interface VehiclesApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	/**
	 * GET /vehicles : List all vehicles
	 *
	 * @return An paged array of vehicles (status code 200) or unexpected error
	 *         (status code 200)
	 */
	@ApiOperation(value = "List all vehicles", nickname = "vehiclesGet", notes = "", response = Vehicle.class, responseContainer = "List", tags = {
			"vehicles", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "An paged array of vehicles", response = Vehicle.class, responseContainer = "List"),
			@ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
	@GetMapping(value = "/vehicles", produces = { "application/json" })
	public ResponseEntity<List<Vehicle>> vehiclesGet();

	/**
	 * GET /vehicles/{id} : Info for a specific vehicle
	 *
	 * @param id The id of vehicle to retrieve (required)
	 * @return Expected response to a valid request (status code 200) or unexpected
	 *         error (status code 200)
	 */
	@ApiOperation(value = "Info for a specific vehicle", nickname = "vehiclesIdGet", notes = "", response = Vehicle.class, tags = {
			"vehicles", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Expected response to a valid request", response = Vehicle.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
	@GetMapping(value = "/vehicles/{id}", produces = { "application/json" })
	public ResponseEntity<Vehicle> vehiclesIdGet(
			@ApiParam(value = "The id of vehicle to retrieve", required = true) @PathVariable("id") String id);

}
